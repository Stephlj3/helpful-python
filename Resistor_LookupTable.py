#Python script to find closest EIA resistor value
#3-14-2020

#EIA Number Tolerance
#E12 = 10%
#E24 = 5%
#E96 = 1%

E12_list = [1.0, 1.2, 1.5, 1.8, 2.2, 2.7, 3.3, 3.9, 4.7, 5.6, 6.8, 8.2,
10, 12, 15, 18, 22, 27, 33, 39, 47, 56, 68, 82,
100, 120, 150, 180, 220, 270, 330, 390, 470, 560, 680, 820,
1000, 1200, 1500, 1800, 2200, 2700, 3300, 3900, 4700, 5600, 6800, 8200,
10000, 12000, 15000, 18000, 22000, 27000, 33000, 39000, 47000, 56000, 68000, 82000,
100000, 120000, 150000, 180000, 220000, 270000, 330000, 390000, 470000, 560000, 680000,
820000,
1000000, 1200000, 1500000, 1800000, 2200000, 2700000, 3300000, 3900000, 4700000, 5600000,
6800000, 8200000,
10000000, 12000000, 15000000, 18000000, 22000000, 27000000, 33000000, 39000000, 47000000,
56000000, 68000000, 82000000,
100000000, 120000000, 150000000, 180000000, 220000000, 270000000, 330000000, 390000000,
470000000, 560000000, 680000000, 820000000]

E24_list = [1.0, 1.1, 1.2, 1.3, 1.5, 1.6, 1.8, 2.0, 2.2, 2.4, 2.7, 3.0, 3.3, 3.6, 3.9, 4.3,
4.7, 5.1, 5.6, 6.2, 6.8, 7.5, 8.2, 9.1,
10, 11, 12, 13, 15, 16, 18, 20, 22, 24, 27, 30, 33, 36, 39, 43, 47, 51, 56, 62, 68, 75,
82, 91,
100, 110, 120, 130, 150, 160, 180, 200, 220, 240, 270, 300, 330, 360, 390, 430, 470,
510, 560, 620, 680, 750, 820, 910,
1000, 1100, 1200, 1300, 1500, 1600, 1800, 2000, 2200, 2400, 2700, 3000, 3300, 3600,
3900, 4300, 4700, 5100, 5600, 6200, 6800, 7500, 8200, 9100,
10000, 11000, 12000, 13000, 15000, 16000, 18000, 20000, 22000, 24000, 27000, 30000,
33000, 36000, 39000, 43000, 47000, 51000, 56000, 62000, 68000, 75000, 82000, 91000,
100000, 110000, 120000, 130000, 150000, 160000, 180000, 200000, 220000, 240000,
270000, 300000, 330000, 360000, 390000, 430000, 470000, 510000, 560000, 620000, 680000,
750000, 820000, 91000,
1000000, 1100000, 1200000, 1300000, 1500000, 1600000, 1800000, 2000000, 2200000, 2400000,
2700000, 3000000, 3300000, 3600000, 3900000, 4300000, 4700000, 5100000, 5600000, 6200000,
6800000, 7500000, 8200000, 9100000,
10000000, 11000000, 12000000, 13000000, 15000000, 16000000, 18000000, 20000000, 22000000,
24000000, 27000000, 30000000, 33000000, 36000000, 39000000, 43000000, 47000000, 51000000,
56000000, 62000000, 68000000, 75000000, 82000000, 91000000, 1000000000]

E96_list = [1.00, 1.02, 1.05, 1.07, 1.10, 1.13, 1.15, 1.18, 1.21, 1.24, 1.27, 1.30, 1.33,
1.37, 1.40, 1.43, 1.47, 1.50, 1.54, 1.58, 1.62, 1.65, 1.69, 1.74, 1.78, 1.82, 1.87, 1.91,
1.96, 2.00, 2.05, 2.10, 2.15, 2.21, 2.26, 2.32, 2.37, 2.43, 2.49, 2.55, 2.61, 2.67, 2.74,
2.80, 2.87, 2.94, 3.01, 3.09, 3.16, 3.24, 3.32, 3.40, 3.48, 3.57, 3.65, 3.74, 3.83, 3.92,
4.02, 4.12, 4.22, 4.32, 4.42, 4.53, 4.64, 4.75, 4.87, 4.99, 5.11, 5.23, 5.36, 5.49, 5.62,
5.76, 5.90, 6.04, 6.19, 6.34, 6.49, 6.65, 6.81, 6.98, 7.15, 7.32, 7.50, 7.68, 7.87, 8.06,
8.25, 8.45, 8.66, 8.87, 9.09, 9.31, 9.53, 9.76,
10.0, 10.2, 10.5, 10.7, 11.0, 11.3, 11.5, 11.8, 12.1, 12.4, 12.7, 13.0, 13.3, 13.7, 14.0,
14.3, 14.7, 15.0, 15.4, 15.8, 16.2, 16.5, 16.9, 17.4, 17.8, 18.2, 18.7, 19.1, 19.6, 20.0,
20.5, 21.0, 21.5, 22.1, 22.6, 23.2, 23.7, 24.3, 24.9, 25.5, 26.1, 26.7, 27.4, 28.0, 28.7,
29.4, 30.1, 30.9, 31.6, 32.4, 33.2, 34.0, 34.8, 35.7, 36.5, 37.4, 38.3, 39.2, 40.2, 41.2,
42.2, 43.2, 44.2, 45.3, 46.4, 47.5, 48.7, 49.9, 51.1, 52.3, 53.6, 54.9, 56.2, 57.6, 59.0,
60.4, 61.9, 63.4, 64.9, 66.5, 68.1, 69.8, 71.5, 73.2, 75.0, 76.8, 78.7, 80.6, 82.5, 84.5,
86.6, 88.7, 90.9, 93.1, 95.3, 97.6,
100, 102, 105, 107, 110, 113, 115, 118, 121, 124, 127, 130, 133, 137, 140, 143, 147, 150,
154, 158, 162, 165, 169, 174, 178, 182, 187, 191, 196, 200, 205, 210, 215, 221, 226, 232,
237, 243, 249, 255, 261, 267, 274, 280, 287, 294, 301, 309, 316, 324, 332, 340, 348, 357,
365, 374, 383, 392, 402, 412, 422, 432, 442, 453, 464, 475, 487, 499, 511, 523, 536, 549,
562, 576, 590, 604, 619, 634, 649, 665, 681, 698, 715, 732, 750, 768, 787, 806, 825, 845,
866, 887, 909, 931, 953, 976,
1000, 1020, 1050, 1070, 1100, 1130, 1150, 1180, 1210, 1240, 1270, 1300, 1330, 1370, 1400,
1430, 1470, 1500, 1540, 1580, 1620, 1650, 1690, 1740, 1780, 1820, 1870, 1910, 1960, 2000,
2050, 2100, 2150, 2210, 2260, 2320, 2370, 2430, 2490, 2550, 2610, 2670, 2740, 2800, 2870,
940, 3010, 3090, 3160, 3240, 3320, 3400, 3480, 3570, 3650, 3740, 3830, 3920, 4020, 4120,
4220, 4320, 4420, 4530, 4640, 4750, 4870, 4990, 5110, 5230, 5360, 5490, 5620, 5760, 5900,
6040, 6190, 6340, 6490, 6650, 6810, 6980, 7150, 7320, 7500, 7680, 7870, 8060, 8250, 8450,
8660, 8870, 9090, 9310, 9530, 9760,
10000, 10200, 10500, 10700, 11000, 11300, 11500, 11800, 12100, 12400, 12700, 13000, 13300,
13700, 14000, 14300, 14700, 15000, 15400, 15800, 16200, 16500, 16900, 17400, 17800, 18200,
18700, 19100, 19600, 20000, 20500, 21000, 21500, 22100, 22600, 23200, 23700, 24300, 24900,
25500, 26100, 26700, 27400, 28000, 28700, 29400, 30100, 30900, 31600, 32400, 33200, 34000,
34800, 35700, 36500, 37400, 38300, 39200, 40200, 41200, 42200, 43200, 44200, 45300, 46400,
47500, 48700, 49900, 51100, 52300, 53600, 54900, 56200, 57600, 59000, 60400, 61900, 63400,
64900, 66500, 68100, 69800, 71500, 73200, 75000, 76800, 78700, 80600, 82500, 84500, 86600,
88700, 90900, 93100, 95300, 97600,
100000, 102000, 105000, 107000, 110000, 113000, 115000, 118000, 121000, 124000, 127000, 130000,
133000, 137000, 140000, 143000, 147000, 150000, 154000, 158000, 162000, 165000, 169000, 174000,
178000, 182000, 187000, 191000, 196000, 200000, 205000, 210000, 215000, 221000, 226000, 232000,
237000, 243000, 249000, 255000, 261000, 267000, 274000, 280000, 287000, 294000, 301000, 309000,
316000, 324000, 332000, 340000, 348000, 357000, 365000, 374000, 383000, 392000, 402000, 412000,
422000, 432000, 442000, 453000, 464000, 475000, 487000, 499000, 511000, 523000, 536000, 549000,
562000, 576000, 590000, 604000, 619000, 634000, 649000, 665000, 681000, 698000, 715000, 732000,
750000, 768000, 787000, 806000, 825000, 845000, 866000, 887000, 909000, 931000, 953000, 976000,
1000000, 1020000, 1050000, 1070000, 1100000, 1130000, 1150000, 1180000, 1210000, 1240000, 1270000,
1300000, 1330000, 1370000, 1400000, 1430000, 1470000, 1500000, 1540000, 1580000, 1620000, 1650000,
1690000, 1740000, 1780000, 1820000, 1870000, 1910000, 1960000, 2000000, 2050000, 2100000, 2150000,
2210000, 2260000, 2320000, 2370000, 2430000, 2490000, 2550000, 2610000, 2670000, 2740000, 2800000,
2870000, 2940000, 3010000, 3090000, 3160000, 3240000, 3320000, 3400000, 3480000, 3570000, 3650000,
3740000, 3830000, 3920000, 4020000, 4120000, 4220000, 4320000, 4420000, 4530000, 4640000, 4750000,
4870000, 4990000, 5110000, 5230000, 5360000, 5490000, 5620000, 5760000, 5900000, 6040000, 6190000,
6340000, 6490000, 6650000, 6810000, 6980000, 7150000, 7320000, 7500000, 7680000, 7870000, 8060000,
8250000, 8450000, 8660000, 8870000, 9090000, 9310000, 9530000, 9760000,
10000000, 10200000, 10500000, 10700000, 11000000, 11300000, 11500000, 11800000, 12100000, 12400000,
12700000, 13000000, 13300000, 13700000, 14000000, 14300000, 14700000, 15000000, 15400000, 15800000,
16200000, 16500000, 16900000, 17400000, 17800000, 18200000, 18700000, 19100000, 19600000, 20000000,
20500000, 21000000, 21500000, 22100000, 22600000, 23200000, 23700000, 24300000, 24900000, 25500000,
26100000, 26700000, 27400000, 28000000, 28700000, 29400000, 30100000, 30900000, 31600000, 32400000,
33200000, 34000000, 34800000, 35700000, 36500000, 37400000, 38300000, 39200000, 40200000, 41200000,
42200000, 43200000, 44200000, 45300000, 46400000, 47500000, 48700000, 49900000, 51100000, 52300000,
53600000, 54900000, 56200000, 57600000, 59000000, 60400000, 61900000, 63400000, 64900000, 66500000,
68100000, 69800000, 71500000, 73200000, 75000000, 76800000, 78700000, 80600000, 82500000, 84500000,
86600000, 88700000, 90900000, 93100000, 95300000, 97600000]


try:
    tolerance = int(input("Enter Tolerance required (1, 5, 10): "))

    if tolerance == 1:
        num = float(input("Enter 1% Resistor Value: "))
        user_input = min(E96_list, key=lambda x:abs(x-num))
        index = E96_list.index(min(E96_list, key=lambda x:abs(x-num)))

        diff = round(user_input - num,2)
        if diff == 0:
            print("Perfect match to 1% E96 value = ", user_input)
        elif diff < 0:
            next_closest = E96_list[index + 1]
            print("Closest 1% E96 value = {} and difference is {}".format(user_input, round(user_input-num,2)))
            print("Next closest 1% E96 value = {} and difference is {}".format(next_closest, round(next_closest-num,2)))
        elif diff > 0:
            next_closest = E96_list[index - 1]
            print("Closest 1% E96 value = {} and difference is {}".format(user_input, round(user_input-num,2)))
            print("Next closest 1% E96 value = {} and difference is {}".format(next_closest, round(next_closest-num,2)))

    elif tolerance == 5:
        num = float(input("Enter 5% Resistor Value: "))
        user_input = min(E24_list, key=lambda x:abs(x-num))
        index = E24_list.index(min(E24_list, key=lambda x:abs(x-num)))

        diff = round(user_input - num,2)
        if diff == 0:
            print("Perfect match to 5% E24 value = ", user_input)
        elif diff < 0:
            next_closest = E24_list[index + 1]
            print("Closest 5% E24 value = {} and difference is {}".format(user_input, round(user_input-num,2)))
            print("Next closest 5% E24 value = {} and difference is {}".format(next_closest, round(next_closest-num,2)))
        elif diff > 0:
            next_closest = E24_list[index - 1]
            print("Closest 5% E24 value = {} and difference is {}".format(user_input, round(user_input-num,2)))
            print("Next closest 5% E24 value = {} and difference is {}".format(next_closest, round(next_closest-num,2)))

    elif tolerance == 10:
        num = float(input("Enter 10% Resistor Value: "))
        user_input = min(E12_list, key=lambda x:abs(x-num))
        index = E12_list.index(min(E12_list, key=lambda x:abs(x-num)))

        diff = round(user_input - num,2)
        if diff == 0:
            print("Perfect match to 10% E12 value = ", user_input)
        elif diff < 0:
            next_closest = E12_list[index + 1]
            print("Closest 10% E12 value = {} and difference is {}".format(user_input, round(user_input-num,2)))
            print("Next closest 10% E12 value = {} and difference is {}".format(next_closest, round(next_closest-num,2)))
        elif diff > 0:
            next_closest = E12_list[index - 1]
            print("Closest 10% E12 value = {} and difference is {}".format(user_input, round(user_input-num,2)))
            print("Next closest 10% E12 value = {} and difference is {}".format(next_closest, round(next_closest-num,2)))

    else :
        print("{} is not an accepted tolerance value".format(tolerance))

except (SyntaxError, ValueError):
    print("Invalid input. Exiting.")
